/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * InNoHassle Search API
 *
### About this project

This is the API for Search project in InNoHassle ecosystem developed by one-zero-eight community.

Using this API you can search among Moodle documents.

Backend is developed using FastAPI framework on Python.

Note: API is unstable. Endpoints and models may change in the future.

Useful links:
- [Search API source code](https://github.com/one-zero-eight/search)
- [Search ML Experiments source code](https://github.com/one-zero-eight/search-experiments)
- [InNoHassle Website](https://innohassle.ru/)

 * OpenAPI spec version: 0.1.0
 */
import { searchQueryPromise } from './axios'

export interface MoodleGetMoodleFiles200Item { [key: string]: unknown }

export interface MoodlePreviewMoodleParams {
  course_id: number
  module_id: number
  filename: string
}

export type MoodleGetCourseNamesGrouped200Item = MoodleFileSource | MoodleUrlSource | MoodleUnknownSource | TelegramSource

export interface MoodleGetCourseNamesGroupedParams {
  course_fullname: string
}

export interface MoodleGetCoursesGroupedBySemester200 { [key: string]: string[] }

export type SearchAddUserFeedbackFeedback = typeof SearchAddUserFeedbackFeedback[keyof typeof SearchAddUserFeedbackFeedback]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAddUserFeedbackFeedback = {
  like: 'like',
  dislike: 'dislike',
} as const

export interface SearchAddUserFeedbackParams {
  response_index: number
  feedback: SearchAddUserFeedbackFeedback
}

export interface SearchSearchByQueryParams {
  query: string
  limit?: number
}

export type ValidationErrorLocItem = string | number

export interface ValidationError {
  loc: ValidationErrorLocItem[]
  msg: string
  type: string
}

export type TelegramSourceType = typeof TelegramSourceType[keyof typeof TelegramSourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TelegramSourceType = {
  telegram: 'telegram',
} as const

export interface TelegramSource {
  /** Breadcrumbs to the resource. */
  breadcrumbs: string[]
  /** Title of the chat, channel, group */
  chat_title: string
  /** Username of the chat, channel, group */
  chat_username: string
  /** Display name of the resource. */
  display_name: string
  /** Link to the message */
  link: string
  /** Message ID in the chat */
  message_id: number
  type: TelegramSourceType
}

/**
 * Assigned search query index
 */
export type SearchResponsesSearchQueryId = string | null

export interface SearchResponses {
  /** Responses to the search query. */
  responses: SearchResponse[]
  /** Assigned search query index */
  search_query_id: SearchResponsesSearchQueryId
  /** Text that was searched for. */
  searched_for: string
}

/**
 * Relevant source for the search.
 */
export type SearchResponseSource = MoodleFileSource | MoodleUrlSource | MoodleUnknownSource | TelegramSource

/**
 * Score of the search response. Multiple scores if was an aggregation of multiple chunks. Optional.
 */
export type SearchResponseScore = number | number[] | null

export interface SearchResponse {
  /** Score of the search response. Multiple scores if was an aggregation of multiple chunks. Optional. */
  score: SearchResponseScore
  /** Relevant source for the search. */
  source: SearchResponseSource
}

export interface PdfLocation {
  /** Page index in the PDF file. Starts from 1. */
  page_index: number
}

export type MoodleUrlSourceType = typeof MoodleUrlSourceType[keyof typeof MoodleUrlSourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoodleUrlSourceType = {
  'moodle-url': 'moodle-url',
} as const

export interface MoodleUrlSource {
  /** Breadcrumbs to the resource. */
  breadcrumbs: string[]
  /** Display name of the resource. */
  display_name: string
  /** Anchor URL to the resource on Moodle. */
  link: string
  type: MoodleUrlSourceType
  /** URL of the resource */
  url: string
}

export type MoodleUnknownSourceType = typeof MoodleUnknownSourceType[keyof typeof MoodleUnknownSourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoodleUnknownSourceType = {
  'moodle-unknown': 'moodle-unknown',
} as const

export interface MoodleUnknownSource {
  /** Breadcrumbs to the resource. */
  breadcrumbs: string[]
  /** Display name of the resource. */
  display_name: string
  /** Anchor URL to the resource on Moodle. */
  link: string
  type: MoodleUnknownSourceType
}

export type MoodleFileSourceType = typeof MoodleFileSourceType[keyof typeof MoodleFileSourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoodleFileSourceType = {
  'moodle-file': 'moodle-file',
} as const

/**
 * URL to get the preview of the resource.
 */
export type MoodleFileSourceResourcePreviewUrl = string | null

/**
 * URL to download the resource.
 */
export type MoodleFileSourceResourceDownloadUrl = string | null

export type MoodleFileSourcePreviewLocation = PdfLocation | null

export interface MoodleFileSource {
  /** Breadcrumbs to the resource. */
  breadcrumbs: string[]
  /** Display name of the resource. */
  display_name: string
  /** Anchor URL to the resource on Moodle. */
  link: string
  preview_location: MoodleFileSourcePreviewLocation
  /** URL to download the resource. */
  resource_download_url: MoodleFileSourceResourceDownloadUrl
  /** URL to get the preview of the resource. */
  resource_preview_url: MoodleFileSourceResourcePreviewUrl
  type: MoodleFileSourceType
}

export interface MoodleEntry {
  contents: MoodleContentSchemaOutput[]
  course_fullname: string
  course_id: number
  /** MongoDB document ObjectID */
  id: string
  module_id: number
  module_modname: string
  module_name: string
  section_id: number
  section_summary: string
}

export interface MoodleCourse {
  course_id: number
  coursecategory: string
  enddate: number
  fullname: string
  /** MongoDB document ObjectID */
  id: string
  startdate: number
}

export type MoodleContentSchemaOutputTimemodified = number | null

export type MoodleContentSchemaOutputTimecreated = number | null

export interface MoodleContentSchemaOutput {
  filename: string
  timecreated: MoodleContentSchemaOutputTimecreated
  timemodified: MoodleContentSchemaOutputTimemodified
  type: string
  uploaded: boolean
}

export type MoodleContentSchemaInputTimemodified = number | null

export type MoodleContentSchemaInputTimecreated = number | null

export interface MoodleContentSchemaInput {
  filename: string
  timecreated?: MoodleContentSchemaInputTimecreated
  timemodified?: MoodleContentSchemaInputTimemodified
  type: string
  uploaded?: boolean
}

export type MessageSchemaText = string | null

export type MessageSchemaCaption = string | null

export interface MessageSchema {
  caption: MessageSchemaCaption
  chat: Chat
  date: string
  id: number
  sender_chat: Chat
  text: MessageSchemaText
}

export interface InModule {
  contents?: MoodleContentSchemaInput[]
  id: number
  modname: string
  name: string
}

export interface InSection {
  id: number
  modules: InModule[]
  summary: string
}

export interface InSections {
  course_fullname: string
  course_id: number
  sections: InSection[]
}

export interface InCourse {
  coursecategory: string
  enddate: number
  fullname: string
  id: number
  startdate: number
}

export interface InCourses {
  courses: InCourse[]
}

export interface InContents {
  contents: MoodleContentSchemaInput[]
  course_id: number
  module_id: number
}

export interface InContent {
  content: MoodleContentSchemaInput
  course_id: number
  module_id: number
}

export interface HTTPValidationError {
  detail?: ValidationError[]
}

export interface FlattenInContentsWithPresignedUrl {
  content: MoodleContentSchemaOutput
  course_id: number
  module_id: number
  presigned_url: string
}

export type DBMessageSchemaText = string | null

export type DBMessageSchemaCaption = string | null

export interface DBMessageSchema {
  caption: DBMessageSchemaCaption
  chat_id: number
  chat_title: string
  chat_username: string
  date: string
  link: string
  message_id: number
  text: DBMessageSchemaText
}

export interface Chat {
  id: number
  title: string
  type: string
  username: string
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export function getInNoHassleSearchAPI() {
/**
 * @summary Search By Query
 */
  const searchSearchByQuery = (
    params: SearchSearchByQueryParams,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<SearchResponses>(
      { url: `/search/search`, method: 'GET', params },
      options,
    )
  }

  /**
   * @summary Add User Feedback
   */
  const searchAddUserFeedback = (
    searchQueryId: string,
    params: SearchAddUserFeedbackParams,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<unknown>(
      { url: `/search/search/${searchQueryId}/feedback`, method: 'POST', params },
      options,
    )
  }

  /**
   * Determining whether to save the message or overwrite it
   * @summary Save Or Update Message
   */
  const telegramSaveOrUpdateMessage = (
    messageSchema: MessageSchema,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<DBMessageSchema>(
      { url: `/telegram/messages`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: messageSchema },
      options,
    )
  }

  /**
   * @summary Get Courses Grouped By Semester
   */
  const moodleGetCoursesGroupedBySemester = (

    options?: SecondParameter<typeof searchQueryPromise>) => {
    return searchQueryPromise<MoodleGetCoursesGroupedBySemester200>(
      { url: `/moodle/courses/grouped-by-semester`, method: 'GET',
      },
      options,
    )
  }

  /**
   * @summary Get Course Names Grouped
   */
  const moodleGetCourseNamesGrouped = (
    params: MoodleGetCourseNamesGroupedParams,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<MoodleGetCourseNamesGrouped200Item[]>(
      { url: `/moodle/courses/by-course-fullname/content`, method: 'GET', params },
      options,
    )
  }

  /**
   * @summary Preview Moodle
   */
  const moodlePreviewMoodle = (
    params: MoodlePreviewMoodleParams,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<unknown>(
      { url: `/moodle/preview`, method: 'GET', params },
      options,
    )
  }

  /**
   * @summary Get Moodle Files
   */
  const moodleGetMoodleFiles = (

    options?: SecondParameter<typeof searchQueryPromise>) => {
    return searchQueryPromise<MoodleGetMoodleFiles200Item[]>(
      { url: `/moodle/files`, method: 'GET',
      },
      options,
    )
  }

  /**
   * @summary Courses
   */
  const moodleCourses = (

    options?: SecondParameter<typeof searchQueryPromise>) => {
    return searchQueryPromise<MoodleCourse[]>(
      { url: `/moodle/courses`, method: 'GET',
      },
      options,
    )
  }

  /**
   * @summary Batch Upsert Courses
   */
  const moodleBatchUpsertCourses = (
    inCourses: InCourses,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<unknown>(
      { url: `/moodle/batch-courses`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: inCourses },
      options,
    )
  }

  /**
   * @summary Courses Content
   */
  const moodleCoursesContent = (

    options?: SecondParameter<typeof searchQueryPromise>) => {
    return searchQueryPromise<MoodleEntry[]>(
      { url: `/moodle/courses-content`, method: 'GET',
      },
      options,
    )
  }

  /**
   * @summary Course Content
   */
  const moodleCourseContent = (
    inSections: InSections[],
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<unknown>(
      { url: `/moodle/set-course-content`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: inSections },
      options,
    )
  }

  /**
   * @summary Need To Upload Contents
   */
  const moodleNeedToUploadContents = (
    inContents: InContents[],
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<FlattenInContentsWithPresignedUrl[]>(
      { url: `/moodle/need-to-upload-contents`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: inContents },
      options,
    )
  }

  /**
   * @summary Content Uploaded
   */
  const moodleContentUploaded = (
    inContent: InContent,
    options?: SecondParameter<typeof searchQueryPromise>,
  ) => {
    return searchQueryPromise<unknown>(
      { url: `/moodle/content-uploaded`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: inContent },
      options,
    )
  }

  return { searchSearchByQuery, searchAddUserFeedback, telegramSaveOrUpdateMessage, moodleGetCoursesGroupedBySemester, moodleGetCourseNamesGrouped, moodlePreviewMoodle, moodleGetMoodleFiles, moodleCourses, moodleBatchUpsertCourses, moodleCoursesContent, moodleCourseContent, moodleNeedToUploadContents, moodleContentUploaded }
}
export type SearchSearchByQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['searchSearchByQuery']>>>
export type SearchAddUserFeedbackResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['searchAddUserFeedback']>>>
export type TelegramSaveOrUpdateMessageResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['telegramSaveOrUpdateMessage']>>>
export type MoodleGetCoursesGroupedBySemesterResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleGetCoursesGroupedBySemester']>>>
export type MoodleGetCourseNamesGroupedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleGetCourseNamesGrouped']>>>
export type MoodlePreviewMoodleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodlePreviewMoodle']>>>
export type MoodleGetMoodleFilesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleGetMoodleFiles']>>>
export type MoodleCoursesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleCourses']>>>
export type MoodleBatchUpsertCoursesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleBatchUpsertCourses']>>>
export type MoodleCoursesContentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleCoursesContent']>>>
export type MoodleCourseContentResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleCourseContent']>>>
export type MoodleNeedToUploadContentsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleNeedToUploadContents']>>>
export type MoodleContentUploadedResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getInNoHassleSearchAPI>['moodleContentUploaded']>>>
